# handlers/callbacks.py

from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config.settings import settings
from services.storage import update_user_data, get_user_data
from pathlib import Path
from functools import lru_cache
import logging
import json

router = Router()

# –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞–º–∏
HOROSCOPES_DIR = Path(r"C:\Users\User\PycharmProjects\PythonProject\krllxnumb\parser\updatehoro\horoscopes")
HOROSCOPESWEEK_DIR = Path (r"C:\Users\User\PycharmProjects\PythonProject\krllxnumb\parser\updatehoro\horoscopeweekly")


@router.callback_query(F.data.startswith("zodiac_"))
async def process_zodiac(callback: types.CallbackQuery):
    zodiac_sign = callback.data.split("_", maxsplit=1)[1]
    if zodiac_sign not in settings.ZODIAC_SIGNS:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞!", show_alert=True)
        return

    user = callback.from_user
    user_id = user.id
    update_user_data(user_id, "zodiac", zodiac_sign)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ü–û–î —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    builder = InlineKeyboardBuilder()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    builder.row(
        types.InlineKeyboardButton(
            text="üìÖ Daily horoscope",  # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            callback_data="horoscope_daily"
        )
    )

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    builder.row(
        types.InlineKeyboardButton(
            text="üìÜ Weekly horoscope",
            callback_data="horoscope_weekly"
        )
    )

    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    builder.row(
        types.InlineKeyboardButton(
            text="üë£ Digital footprint",
            callback_data="digital_footprint"
        ),
        types.InlineKeyboardButton(
            text="‚öôÔ∏è Settings",
            callback_data="open_settings"
        )
    )

    nickname = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user.last_name:
        nickname += f" {user.last_name}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ü–û–î —Ç–µ–∫—Å—Ç–æ–º
    await callback.message.edit_text(
        text=f"{nickname}, –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac_sign}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "open_settings")
async def open_settings(callback: types.CallbackQuery):
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    from handlers.commands import cmd_start
    await cmd_start(callback.message)
    await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
@lru_cache(maxsize=12)  # –ö—ç—à–∏—Ä—É–µ–º 12 –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
def load_horoscope(file_path: str):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        return None

@router.callback_query(F.data == "horoscope_daily")
async def daily_horoscope(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    zodiac_sign = user_data.get("zodiac")

    if not zodiac_sign:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞!", show_alert=True)
        return

    file_name = settings.ZODIAC_FILES.get(zodiac_sign)
    if not file_name:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    file_path = HOROSCOPES_DIR / file_name

    try:
        horoscope_data = load_horoscope(file_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        horoscope_text = horoscope_data.get('data', {}).get('horoscope_data', '–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É –∏–ª–∏ –ø—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç
        premium_text = "\n\nüîÆ –•–æ—Ç–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø? /premium"

        await callback.message.answer(
            f"üéä Daily Horoscope for {zodiac_sign} üéä\n\n"
            f"{horoscope_text}"
            f"{premium_text if not user_data.get('is_premium') else ''}"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    await callback.answer()


@router.callback_query(F.data == "horoscope_weekly")
async def weekly_horoscope(callback: types.CallbackQuery):
    try:
        user_data = get_user_data(callback.from_user.id)
        zodiac_sign = user_data.get("zodiac")


        if not zodiac_sign:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞!", show_alert=True)
            return

        file_name = settings.ZODIAC_FILES.get(zodiac_sign)
        if not file_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        file_path = str((HOROSCOPESWEEK_DIR / file_name).absolute())

        if not Path(file_path).exists():
            await callback.answer("–ì–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        horoscope_data = load_horoscope(file_path)
        if not horoscope_data:
            await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞", show_alert=True)
            return

        premium_text = "\n\nüîÆ –•–æ—Ç–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø? /premium" if not user_data.get('is_premium') else ""

        await callback.message.answer(
            f"üéä Weekly Horoscope for {zodiac_sign} üéä\n\n"
            f"{horoscope_data.get('data', {}).get('horoscope_data', '–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω')}"
            f"{premium_text}"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ weekly_horoscope: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await callback.answer()



@router.callback_query(F.data == "digital_footprint")
async def digital_footprint(callback: types.CallbackQuery):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–ª–µ–¥–∞
    await callback.answer("–§—É–Ω–∫—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–ª–µ–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

from handlers.keyboards import get_zodiac_inline_keyboard

@router.callback_query(F.data == "choose_zodiac")
async def choose_zodiac(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
        reply_markup=get_zodiac_inline_keyboard()
    )