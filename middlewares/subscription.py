from aiogram import types
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from config.settings import settings
from typing import Callable, Awaitable, Dict, Any


class SubscriptionMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: types.TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥ /start –∏ /help
        if isinstance(event, types.Message) and event.text in ['/start', '/help']:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        bot = data['bot']
        user_id = event.from_user.id

        try:
            member = await bot.get_chat_member(
                chat_id=settings.CHANNEL_USERNAME,
                user_id=user_id
            )
            is_subscribed = member.status in ['member', 'administrator', 'creator']

            if not is_subscribed:
                if isinstance(event, types.CallbackQuery):
                    await event.answer(
                        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
                        show_alert=True
                    )
                    return
                elif isinstance(event, types.Message):
                    await event.answer(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:\n"
                        f"üëâ {settings.CHANNEL_USERNAME}",
                        disable_web_page_preview=True
                    )
                    return

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            pass

        return await handler(event, data)